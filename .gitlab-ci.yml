# Diese Datei aktiviert und steuert das automatisierte Deployment des Maven-Projektes, in dem sie sich befindet. Das Projekt wird dadurch bei jedem Push von GitLab CI/CD automatisch gebaut und in einem Kubernetes-Cluster als Docker-Container deployt. Die gesamte Logik dafür steckt an zentraler Stelle in einem Script, das über den "include"-Befehl ganz unten eingebunden wird.

# Wichtige Anforderungen für einen erfolgreichen Pipeline-Durchlauf:
#  a) Die Maven-Datei pom.xml muss sich auf der obersten Ebene dieses Projektes befinden!
#  b) Um die Messung der Testabdeckung zu aktivieren, ergänzen Sie in der Datei pom.xml den Eintrag für JaCoCo wie im Entwicklerhandbuch erläutert.
#  c) Weiterhin muss sich eine Datei namens postman_collection.json auf der obersten Ebene befinden, die mindestens einen Testfall für Postman enthält.
#  d) Bitte passen Sie in der nachfolgenden Variablendeklaration den Wert für die Variable HEALTHCHECK_PATH an. Sie ist per Default mit dem Root-Pfad „/“ gefüllt, kann aber auch auf einen anderen URL-Pfad gesetzt werden. Diesen Pfad ruft die Deployment Pipeline nach jedem Deployment auf, um zu prüfen, ob Ihre Anwendung mit Statuscode 200 (=OK) antwortet. Wenn die Pipeline unter dem gespeicherten Pfad keinen Statuscode 200 empfängt, gilt das Deployment und damit der Pipeline-Durchlauf als fehlgeschlagen.

variables: 
  HEALTHCHECK_PATH: "/event/healthcheck"
  #Nur falls der Service nach dem Deployment per HTTPS angesprochen werden soll, müssen die nachfolgenden Zeilen wieder einkommentiert werden!
  #HTTPS: "https"
  #HTTPS_SCHEME: "HTTPS"
  #sslPaththrough: "true"
  #tlsEnabled: "true"

include:
  - remote: 'https://git.fh-muenster.de/sweng_templates/sweng_yml-template/raw/master/template_gitlab-ci.yml.yml'
